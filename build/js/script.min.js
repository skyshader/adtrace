!function(t,e){t.getElementById("livereloadscript")||((e=t.createElement("script")).async=1,e.src="//"+(window.location.host||"localhost").split(":")[0]+":35729/livereload.js?snipver=1",e.id="livereloadscript",t.getElementsByTagName("head")[0].appendChild(e))}(window.document),function(){"use strict";function t(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function e(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function r(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}function n(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){n(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function c(t,e){return(c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function u(t,e){return!e||"object"!=typeof e&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function s(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=a(t);if(e){var i=a(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return u(this,r)}}function f(t,e,r){return(f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=a(t)););return t}(t,e);if(n){var i=Object.getOwnPropertyDescriptor(n,e);return i.get?i.get.call(r):i.value}})(t,e,r||t)}function l(t){return function(t){if(Array.isArray(t))return v(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return v(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return v(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var h=function(){this.__data__=[],this.size=0};var p=function(t,e){return t===e||t!=t&&e!=e};var b=function(t,e){for(var r=t.length;r--;)if(p(t[r][0],e))return r;return-1},y=Array.prototype.splice;var d=function(t){var e=this.__data__,r=b(e,t);return!(r<0)&&(r==e.length-1?e.pop():y.call(e,r,1),--this.size,!0)};var j=function(t){var e=this.__data__,r=b(e,t);return r<0?void 0:e[r][1]};var g=function(t){return b(this.__data__,t)>-1};var _=function(t,e){var r=this.__data__,n=b(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this};function w(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}w.prototype.clear=h,w.prototype.delete=d,w.prototype.get=j,w.prototype.has=g,w.prototype.set=_;var O=w;var m=function(){this.__data__=new O,this.size=0};var A=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r};var k=function(t){return this.__data__.get(t)};var S=function(t){return this.__data__.has(t)},P="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function E(t){var e={exports:{}};return t(e,e.exports),e.exports}var T="object"==typeof P&&P&&P.Object===Object&&P,x="object"==typeof self&&self&&self.Object===Object&&self,I=T||x||Function("return this")(),z=I.Symbol,C=Object.prototype,V=C.hasOwnProperty,M=C.toString,B=z?z.toStringTag:void 0;var F=function(t){var e=V.call(t,B),r=t[B];try{t[B]=void 0;var n=!0}catch(t){}var i=M.call(t);return n&&(e?t[B]=r:delete t[B]),i},R=Object.prototype.toString;var U=function(t){return R.call(t)},D=z?z.toStringTag:void 0;var L=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":D&&D in Object(t)?F(t):U(t)};var $=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)};var N,W=function(t){if(!$(t))return!1;var e=L(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e},q=I["__core-js_shared__"],G=(N=/[^.]+$/.exec(q&&q.keys&&q.keys.IE_PROTO||""))?"Symbol(src)_1."+N:"";var H=function(t){return!!G&&G in t},J=Function.prototype.toString;var K=function(t){if(null!=t){try{return J.call(t)}catch(t){}try{return t+""}catch(t){}}return""},Q=/^\[object .+?Constructor\]$/,X=Function.prototype,Y=Object.prototype,Z=X.toString,tt=Y.hasOwnProperty,et=RegExp("^"+Z.call(tt).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");var rt=function(t){return!(!$(t)||H(t))&&(W(t)?et:Q).test(K(t))};var nt=function(t,e){return null==t?void 0:t[e]};var it=function(t,e){var r=nt(t,e);return rt(r)?r:void 0},ot=it(I,"Map"),at=it(Object,"create");var ct=function(){this.__data__=at?at(null):{},this.size=0};var ut=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},st=Object.prototype.hasOwnProperty;var ft=function(t){var e=this.__data__;if(at){var r=e[t];return"__lodash_hash_undefined__"===r?void 0:r}return st.call(e,t)?e[t]:void 0},lt=Object.prototype.hasOwnProperty;var vt=function(t){var e=this.__data__;return at?void 0!==e[t]:lt.call(e,t)};var ht=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=at&&void 0===e?"__lodash_hash_undefined__":e,this};function pt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}pt.prototype.clear=ct,pt.prototype.delete=ut,pt.prototype.get=ft,pt.prototype.has=vt,pt.prototype.set=ht;var bt=pt;var yt=function(){this.size=0,this.__data__={hash:new bt,map:new(ot||O),string:new bt}};var dt=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t};var jt=function(t,e){var r=t.__data__;return dt(e)?r["string"==typeof e?"string":"hash"]:r.map};var gt=function(t){var e=jt(this,t).delete(t);return this.size-=e?1:0,e};var _t=function(t){return jt(this,t).get(t)};var wt=function(t){return jt(this,t).has(t)};var Ot=function(t,e){var r=jt(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this};function mt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}mt.prototype.clear=yt,mt.prototype.delete=gt,mt.prototype.get=_t,mt.prototype.has=wt,mt.prototype.set=Ot;var At=mt;var kt=function(t,e){var r=this.__data__;if(r instanceof O){var n=r.__data__;if(!ot||n.length<199)return n.push([t,e]),this.size=++r.size,this;r=this.__data__=new At(n)}return r.set(t,e),this.size=r.size,this};function St(t){var e=this.__data__=new O(t);this.size=e.size}St.prototype.clear=m,St.prototype.delete=A,St.prototype.get=k,St.prototype.has=S,St.prototype.set=kt;var Pt=St;var Et=function(t,e){for(var r=-1,n=null==t?0:t.length;++r<n&&!1!==e(t[r],r,t););return t},Tt=function(){try{var t=it(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();var xt=function(t,e,r){"__proto__"==e&&Tt?Tt(t,e,{configurable:!0,enumerable:!0,value:r,writable:!0}):t[e]=r},It=Object.prototype.hasOwnProperty;var zt=function(t,e,r){var n=t[e];It.call(t,e)&&p(n,r)&&(void 0!==r||e in t)||xt(t,e,r)};var Ct=function(t,e,r,n){var i=!r;r||(r={});for(var o=-1,a=e.length;++o<a;){var c=e[o],u=n?n(r[c],t[c],c,r,t):void 0;void 0===u&&(u=t[c]),i?xt(r,c,u):zt(r,c,u)}return r};var Vt=function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n};var Mt=function(t){return null!=t&&"object"==typeof t};var Bt=function(t){return Mt(t)&&"[object Arguments]"==L(t)},Ft=Object.prototype,Rt=Ft.hasOwnProperty,Ut=Ft.propertyIsEnumerable,Dt=Bt(function(){return arguments}())?Bt:function(t){return Mt(t)&&Rt.call(t,"callee")&&!Ut.call(t,"callee")},Lt=Array.isArray;var $t=function(){return!1},Nt=E((function(t,e){var r=e&&!e.nodeType&&e,n=r&&t&&!t.nodeType&&t,i=n&&n.exports===r?I.Buffer:void 0,o=(i?i.isBuffer:void 0)||$t;t.exports=o})),Wt=/^(?:0|[1-9]\d*)$/;var qt=function(t,e){var r=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&Wt.test(t))&&t>-1&&t%1==0&&t<e};var Gt=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991},Ht={};Ht["[object Float32Array]"]=Ht["[object Float64Array]"]=Ht["[object Int8Array]"]=Ht["[object Int16Array]"]=Ht["[object Int32Array]"]=Ht["[object Uint8Array]"]=Ht["[object Uint8ClampedArray]"]=Ht["[object Uint16Array]"]=Ht["[object Uint32Array]"]=!0,Ht["[object Arguments]"]=Ht["[object Array]"]=Ht["[object ArrayBuffer]"]=Ht["[object Boolean]"]=Ht["[object DataView]"]=Ht["[object Date]"]=Ht["[object Error]"]=Ht["[object Function]"]=Ht["[object Map]"]=Ht["[object Number]"]=Ht["[object Object]"]=Ht["[object RegExp]"]=Ht["[object Set]"]=Ht["[object String]"]=Ht["[object WeakMap]"]=!1;var Jt=function(t){return Mt(t)&&Gt(t.length)&&!!Ht[L(t)]};var Kt=function(t){return function(e){return t(e)}},Qt=E((function(t,e){var r=e&&!e.nodeType&&e,n=r&&t&&!t.nodeType&&t,i=n&&n.exports===r&&T.process,o=function(){try{var t=n&&n.require&&n.require("util").types;return t||i&&i.binding&&i.binding("util")}catch(t){}}();t.exports=o})),Xt=Qt&&Qt.isTypedArray,Yt=Xt?Kt(Xt):Jt,Zt=Object.prototype.hasOwnProperty;var te=function(t,e){var r=Lt(t),n=!r&&Dt(t),i=!r&&!n&&Nt(t),o=!r&&!n&&!i&&Yt(t),a=r||n||i||o,c=a?Vt(t.length,String):[],u=c.length;for(var s in t)!e&&!Zt.call(t,s)||a&&("length"==s||i&&("offset"==s||"parent"==s)||o&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||qt(s,u))||c.push(s);return c},ee=Object.prototype;var re=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||ee)};var ne=function(t,e){return function(r){return t(e(r))}},ie=ne(Object.keys,Object),oe=Object.prototype.hasOwnProperty;var ae=function(t){if(!re(t))return ie(t);var e=[];for(var r in Object(t))oe.call(t,r)&&"constructor"!=r&&e.push(r);return e};var ce=function(t){return null!=t&&Gt(t.length)&&!W(t)};var ue=function(t){return ce(t)?te(t):ae(t)};var se=function(t,e){return t&&Ct(e,ue(e),t)};var fe=function(t){var e=[];if(null!=t)for(var r in Object(t))e.push(r);return e},le=Object.prototype.hasOwnProperty;var ve=function(t){if(!$(t))return fe(t);var e=re(t),r=[];for(var n in t)("constructor"!=n||!e&&le.call(t,n))&&r.push(n);return r};var he=function(t){return ce(t)?te(t,!0):ve(t)};var pe=function(t,e){return t&&Ct(e,he(e),t)},be=E((function(t,e){var r=e&&!e.nodeType&&e,n=r&&t&&!t.nodeType&&t,i=n&&n.exports===r?I.Buffer:void 0,o=i?i.allocUnsafe:void 0;t.exports=function(t,e){if(e)return t.slice();var r=t.length,n=o?o(r):new t.constructor(r);return t.copy(n),n}}));var ye=function(t,e){var r=-1,n=t.length;for(e||(e=Array(n));++r<n;)e[r]=t[r];return e};var de=function(t,e){for(var r=-1,n=null==t?0:t.length,i=0,o=[];++r<n;){var a=t[r];e(a,r,t)&&(o[i++]=a)}return o};var je=function(){return[]},ge=Object.prototype.propertyIsEnumerable,_e=Object.getOwnPropertySymbols,we=_e?function(t){return null==t?[]:(t=Object(t),de(_e(t),(function(e){return ge.call(t,e)})))}:je;var Oe=function(t,e){return Ct(t,we(t),e)};var me=function(t,e){for(var r=-1,n=e.length,i=t.length;++r<n;)t[i+r]=e[r];return t},Ae=ne(Object.getPrototypeOf,Object),ke=Object.getOwnPropertySymbols?function(t){for(var e=[];t;)me(e,we(t)),t=Ae(t);return e}:je;var Se=function(t,e){return Ct(t,ke(t),e)};var Pe=function(t,e,r){var n=e(t);return Lt(t)?n:me(n,r(t))};var Ee=function(t){return Pe(t,ue,we)};var Te=function(t){return Pe(t,he,ke)},xe=it(I,"DataView"),Ie=it(I,"Promise"),ze=it(I,"Set"),Ce=it(I,"WeakMap"),Ve="[object Map]",Me="[object Promise]",Be="[object Set]",Fe="[object WeakMap]",Re="[object DataView]",Ue=K(xe),De=K(ot),Le=K(Ie),$e=K(ze),Ne=K(Ce),We=L;(xe&&We(new xe(new ArrayBuffer(1)))!=Re||ot&&We(new ot)!=Ve||Ie&&We(Ie.resolve())!=Me||ze&&We(new ze)!=Be||Ce&&We(new Ce)!=Fe)&&(We=function(t){var e=L(t),r="[object Object]"==e?t.constructor:void 0,n=r?K(r):"";if(n)switch(n){case Ue:return Re;case De:return Ve;case Le:return Me;case $e:return Be;case Ne:return Fe}return e});var qe=We,Ge=Object.prototype.hasOwnProperty;var He=function(t){var e=t.length,r=new t.constructor(e);return e&&"string"==typeof t[0]&&Ge.call(t,"index")&&(r.index=t.index,r.input=t.input),r},Je=I.Uint8Array;var Ke=function(t){var e=new t.constructor(t.byteLength);return new Je(e).set(new Je(t)),e};var Qe=function(t,e){var r=e?Ke(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.byteLength)},Xe=/\w*$/;var Ye=function(t){var e=new t.constructor(t.source,Xe.exec(t));return e.lastIndex=t.lastIndex,e},Ze=z?z.prototype:void 0,tr=Ze?Ze.valueOf:void 0;var er=function(t){return tr?Object(tr.call(t)):{}};var rr=function(t,e){var r=e?Ke(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.length)};var nr=function(t,e,r){var n=t.constructor;switch(e){case"[object ArrayBuffer]":return Ke(t);case"[object Boolean]":case"[object Date]":return new n(+t);case"[object DataView]":return Qe(t,r);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return rr(t,r);case"[object Map]":return new n;case"[object Number]":case"[object String]":return new n(t);case"[object RegExp]":return Ye(t);case"[object Set]":return new n;case"[object Symbol]":return er(t)}},ir=Object.create,or=function(){function t(){}return function(e){if(!$(e))return{};if(ir)return ir(e);t.prototype=e;var r=new t;return t.prototype=void 0,r}}();var ar=function(t){return"function"!=typeof t.constructor||re(t)?{}:or(Ae(t))};var cr=function(t){return Mt(t)&&"[object Map]"==qe(t)},ur=Qt&&Qt.isMap,sr=ur?Kt(ur):cr;var fr=function(t){return Mt(t)&&"[object Set]"==qe(t)},lr=Qt&&Qt.isSet,vr=lr?Kt(lr):fr,hr="[object Arguments]",pr="[object Function]",br="[object Object]",yr={};yr[hr]=yr["[object Array]"]=yr["[object ArrayBuffer]"]=yr["[object DataView]"]=yr["[object Boolean]"]=yr["[object Date]"]=yr["[object Float32Array]"]=yr["[object Float64Array]"]=yr["[object Int8Array]"]=yr["[object Int16Array]"]=yr["[object Int32Array]"]=yr["[object Map]"]=yr["[object Number]"]=yr[br]=yr["[object RegExp]"]=yr["[object Set]"]=yr["[object String]"]=yr["[object Symbol]"]=yr["[object Uint8Array]"]=yr["[object Uint8ClampedArray]"]=yr["[object Uint16Array]"]=yr["[object Uint32Array]"]=!0,yr["[object Error]"]=yr[pr]=yr["[object WeakMap]"]=!1;var dr=function t(e,r,n,i,o,a){var c,u=1&r,s=2&r,f=4&r;if(n&&(c=o?n(e,i,o,a):n(e)),void 0!==c)return c;if(!$(e))return e;var l=Lt(e);if(l){if(c=He(e),!u)return ye(e,c)}else{var v=qe(e),h=v==pr||"[object GeneratorFunction]"==v;if(Nt(e))return be(e,u);if(v==br||v==hr||h&&!o){if(c=s||h?{}:ar(e),!u)return s?Se(e,pe(c,e)):Oe(e,se(c,e))}else{if(!yr[v])return o?e:{};c=nr(e,v,u)}}a||(a=new Pt);var p=a.get(e);if(p)return p;a.set(e,c),vr(e)?e.forEach((function(i){c.add(t(i,r,n,i,e,a))})):sr(e)&&e.forEach((function(i,o){c.set(o,t(i,r,n,o,e,a))}));var b=l?void 0:(f?s?Te:Ee:s?he:ue)(e);return Et(b||e,(function(i,o){b&&(i=e[o=i]),zt(c,o,t(i,r,n,o,e,a))})),c};var jr=function(t){return dr(t,5)};var gr=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this};var _r=function(t){return this.__data__.has(t)};function wr(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new At;++e<r;)this.add(t[e])}wr.prototype.add=wr.prototype.push=gr,wr.prototype.has=_r;var Or=wr;var mr=function(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(e(t[r],r,t))return!0;return!1};var Ar=function(t,e){return t.has(e)};var kr=function(t,e,r,n,i,o){var a=1&r,c=t.length,u=e.length;if(c!=u&&!(a&&u>c))return!1;var s=o.get(t),f=o.get(e);if(s&&f)return s==e&&f==t;var l=-1,v=!0,h=2&r?new Or:void 0;for(o.set(t,e),o.set(e,t);++l<c;){var p=t[l],b=e[l];if(n)var y=a?n(b,p,l,e,t,o):n(p,b,l,t,e,o);if(void 0!==y){if(y)continue;v=!1;break}if(h){if(!mr(e,(function(t,e){if(!Ar(h,e)&&(p===t||i(p,t,r,n,o)))return h.push(e)}))){v=!1;break}}else if(p!==b&&!i(p,b,r,n,o)){v=!1;break}}return o.delete(t),o.delete(e),v};var Sr=function(t){var e=-1,r=Array(t.size);return t.forEach((function(t,n){r[++e]=[n,t]})),r};var Pr=function(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=t})),r},Er=z?z.prototype:void 0,Tr=Er?Er.valueOf:void 0;var xr=function(t,e,r,n,i,o,a){switch(r){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!o(new Je(t),new Je(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return p(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case"[object Map]":var c=Sr;case"[object Set]":var u=1&n;if(c||(c=Pr),t.size!=e.size&&!u)return!1;var s=a.get(t);if(s)return s==e;n|=2,a.set(t,e);var f=kr(c(t),c(e),n,i,o,a);return a.delete(t),f;case"[object Symbol]":if(Tr)return Tr.call(t)==Tr.call(e)}return!1},Ir=Object.prototype.hasOwnProperty;var zr=function(t,e,r,n,i,o){var a=1&r,c=Ee(t),u=c.length;if(u!=Ee(e).length&&!a)return!1;for(var s=u;s--;){var f=c[s];if(!(a?f in e:Ir.call(e,f)))return!1}var l=o.get(t),v=o.get(e);if(l&&v)return l==e&&v==t;var h=!0;o.set(t,e),o.set(e,t);for(var p=a;++s<u;){var b=t[f=c[s]],y=e[f];if(n)var d=a?n(y,b,f,e,t,o):n(b,y,f,t,e,o);if(!(void 0===d?b===y||i(b,y,r,n,o):d)){h=!1;break}p||(p="constructor"==f)}if(h&&!p){var j=t.constructor,g=e.constructor;j==g||!("constructor"in t)||!("constructor"in e)||"function"==typeof j&&j instanceof j&&"function"==typeof g&&g instanceof g||(h=!1)}return o.delete(t),o.delete(e),h},Cr="[object Arguments]",Vr="[object Array]",Mr="[object Object]",Br=Object.prototype.hasOwnProperty;var Fr=function(t,e,r,n,i,o){var a=Lt(t),c=Lt(e),u=a?Vr:qe(t),s=c?Vr:qe(e),f=(u=u==Cr?Mr:u)==Mr,l=(s=s==Cr?Mr:s)==Mr,v=u==s;if(v&&Nt(t)){if(!Nt(e))return!1;a=!0,f=!1}if(v&&!f)return o||(o=new Pt),a||Yt(t)?kr(t,e,r,n,i,o):xr(t,e,u,r,n,i,o);if(!(1&r)){var h=f&&Br.call(t,"__wrapped__"),p=l&&Br.call(e,"__wrapped__");if(h||p){var b=h?t.value():t,y=p?e.value():e;return o||(o=new Pt),i(b,y,r,n,o)}}return!!v&&(o||(o=new Pt),zr(t,e,r,n,i,o))};var Rr=function t(e,r,n,i,o){return e===r||(null==e||null==r||!Mt(e)&&!Mt(r)?e!=e&&r!=r:Fr(e,r,n,i,t,o))};var Ur=function(t,e){return Rr(t,e)},Dr=function(e){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&c(t,e)}(i,e);var n=s(i);function i(){var e,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{visible:!1,viewTime:0,visiblePercentage:0,clicks:0};return t(this,i),(e=n.call(this)).internalState=jr(r),e}return r(i,[{key:"state",get:function(){return jr(this.internalState)}},{key:"setState",value:function(t){var e=jr(this.internalState),r=Object.assign(jr(e),jr(t));return this.internalState=r,f(a(i.prototype),"publish",this).call(this,r,e),r}}]),i}(function(){function e(){t(this,e),this.listeners=[]}return r(e,[{key:"publish",value:function(t,e){this.listeners.forEach((function(r){Ur(t,e)||r(t,e)}))}},{key:"subscribe",value:function(t){return this.listeners=[].concat(l(this.listeners),[t]),!0}},{key:"unsubscribe",value:function(t){var e=this.listeners.findIndex((function(e){return e===t}));e>-1&&this.listeners.splice(e,1)}}]),e}()),Lr=function(t){console.log("Ad is viewable: ",t.visible,"\nViewability time of the ad in sec:",t.viewTime,"\nVisible percentage of the ad:",t.visiblePercentage,"\nClicks:",t.clicks)},$r="view",Nr="click",Wr=function(){function e(){t(this,e),this.running=!1,this.lastStarted=0,this.elapsedTime=0,this.interval=null}return r(e,[{key:"update",value:function(){var t=performance.now();if(this.lastStarted){var e=t-this.lastStarted;this.elapsedTime=this.elapsedTime+e}this.running?this.lastStarted=t:this.lastStarted=0}},{key:"start",value:function(){this.running=!0,this.update()}},{key:"stop",value:function(){this.running=!1,this.update()}},{key:"reset",value:function(){this.interval&&clearInterval(this.interval),this.running=!1,this.lastStarted=0,this.elapsedTime=0,this.interval=null}},{key:"track",value:function(t){var e=this;this.interval=setInterval((function(){var r=e.elapsedTime;e.update(),r!==e.elapsedTime&&t(e.elapsedTime)}),1e3)}}]),e}(),qr=function(){function e(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=r.element,i=r.options,a=(i=void 0===i?{}:i).root,c=void 0===a?null:a,u=i.rootMargin,s=void 0===u?"0px":u,f=i.threshold,l=(f=void 0===f?{}:f).steps,v=void 0===l?100:l,h=f.cutoff,p=void 0===h?1:h;t(this,e),this.element=n,this.options={root:c,rootMargin:s},this.threshold={steps:v,cutoff:p},this.intersectionObserver=new IntersectionObserver(this.onIntersection.bind(this),o(o({},this.options),{},{threshold:this.buildThresholdList()}))}return r(e,[{key:"buildThresholdList",value:function(){for(var t=[],e=1;e<=this.threshold.steps;e++){var r=e/this.threshold.steps;t.push(r)}return t.push(0),t}},{key:"onIntersection",value:function(t){var e=this;t.forEach((function(t){var r=Math.round(100*t.intersectionRatio),n=!1;t.isIntersecting?t.intersectionRatio>=e.threshold.cutoff&&(n=!0):n=!1,e.element.dispatchEvent(new CustomEvent("onvisiblepercentagechange",{detail:{percentage:r,isVisible:n}}))}))}},{key:"track",value:function(){this.intersectionObserver.observe(this.element)}}]),e}(),Gr=function(){function e(r,n){t(this,e),this.element=r,this.store=n,this.timer=null,this.intersectionTracker=null,this.visibility={document:!document.hidden&&document.hasFocus(),advertisement:!1},this.onVisibilityChange=this.onVisibilityChange.bind(this),this.onVisibilityPercentageChange=this.onVisibilityPercentageChange.bind(this),this.setup()}return r(e,[{key:"setup",value:function(){this.timer=new Wr,this.intersectionTracker=new qr({element:this.element})}},{key:"updateVisibility",value:function(t){var e=this.store.state.visible;this.visibility=o(o({},this.visibility),t);var r=this.visibility.document&&this.visibility.advertisement;e!==r&&(this.store.setState(o(o({},this.store.state),{visible:r})),r?this.timer.start():this.timer.stop())}},{key:"onVisibilityPercentageChange",value:function(t){var e=t.detail,r=e.percentage,n=e.isVisible;this.store.setState(o(o({},this.store.state),{visiblePercentage:r})),this.updateVisibility({advertisement:n})}},{key:"onVisibilityChange",value:function(){this.updateVisibility({document:!document.hidden&&document.hasFocus()})}},{key:"track",value:function(){var t=this;this.timer.track((function(e){t.store.setState(o(o({},t.store.state),{viewTime:Math.round(e/1e3)}))})),this.intersectionTracker.track(),window.addEventListener("blur",this.onVisibilityChange,!1),window.addEventListener("focus",this.onVisibilityChange,!1),document.addEventListener("visibilitychange",this.onVisibilityChange,!1),this.element.addEventListener("onvisiblepercentagechange",this.onVisibilityPercentageChange,!1)}}]),e}(),Hr=function(){function e(r,n){t(this,e),this.element=r,this.store=n,this.onClick=this.onClick.bind(this)}return r(e,[{key:"onClick",value:function(){var t=this.store.state.clicks;this.store.setState(o(o({},this.store.state),{clicks:t+1}))}},{key:"track",value:function(){this.element.addEventListener("click",this.onClick,!1)}}]),e}(),Jr=function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[$r,Nr];return r.map((function(r){switch(r){case $r:return new Gr(t,e);case Nr:return new Hr(t,e);default:throw Error("Metrics tracker not available for provided type!")}}))},Kr=document.getElementById("ad"),Qr=new Dr;Qr.subscribe(Lr),Jr(Kr,Qr).forEach((function(t){return t.track()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
